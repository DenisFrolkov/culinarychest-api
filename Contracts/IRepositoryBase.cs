using System.Linq.Expressions;

namespace Contracts;

public interface IRepositoryBase<T> //представляет собой общий шаблон для репозитория, который может быть использован для работы с любым типом сущности T
{
    IQueryable<T> FindAll(bool trackChanges); //Возвращает IQueryable<T>, который представляет собой набор всех сущностей типа T.
    //Параметр trackChanges указывает, следует ли отслеживать изменения в сущностях.
    //Это может быть полезно для оптимизации производительности, когда отслеживание изменений не требуется.
    IQueryable<T> FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges); //Возвращает IQueryable<T>,
    //который представляет собой набор сущностей типа T, соответствующих заданному условию.
    //Условие задается с помощью лямбда-выражения, которое принимает сущность типа T и возвращает bool.
    //Параметр trackChanges также указывает, следует ли отслеживать изменения в сущностях.
    void Create(T entity); //Добавляет новую сущность типа T в базу данных.
    void Update(T entity); //Обновляет существующую сущность типа T в базе данных.
    void Delete(T entity); //Удаляет сущность типа T из базы данных.
} 